package config

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"go-practice/internal/handlers"
	"go-practice/internal/middleware"
	"go-practice/internal/services"
	"go-practice/migrations"

	_ "go-practice/docs"

	"github.com/gin-gonic/gin"
	"github.com/hashicorp/hcl/v2/hclsimple"
	"github.com/sirupsen/logrus"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// Config –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–æ–¥–∞—Ç–∫—É
type Config struct {
	Server   ServerConfig   `hcl:"server,block"`
	Database DatabaseConfig `hcl:"database,block"`
	OIDC     OIDCConfig     `hcl:"oidc,block"`
	Security SecurityConfig `hcl:"security,block"`
	Redis    RedisConfig    `hcl:"redis,block"`
}

// ServerConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
type ServerConfig struct {
	Host         string `hcl:"host"`
	Port         int    `hcl:"port"`
	Environment  string `hcl:"environment"`
	LogLevel     string `hcl:"log_level"`
	LogFormat    string `hcl:"log_format"`
	ReadTimeout  string `hcl:"read_timeout"`
	WriteTimeout string `hcl:"write_timeout"`
	IdleTimeout  string `hcl:"idle_timeout"`
}

// DatabaseConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
type DatabaseConfig struct {
	Driver                string `hcl:"driver"`
	Host                  string `hcl:"host"`
	Port                  int    `hcl:"port"`
	Name                  string `hcl:"name"`
	User                  string `hcl:"user"`
	Password              string `hcl:"password"`
	SSLMode               string `hcl:"ssl_mode"`
	MaxOpenConnections    int    `hcl:"max_open_connections"`
	MaxIdleConnections    int    `hcl:"max_idle_connections"`
	ConnectionMaxLifetime string `hcl:"connection_max_lifetime"`
}

// OIDCConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenID Connect
type OIDCConfig struct {
	Provider OIDCProviderConfig `hcl:"provider,block"`
	Tokens   OIDCTokensConfig   `hcl:"tokens,block"`
	Scopes   []string           `hcl:"scopes"`
}

// OIDCProviderConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OIDC –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
type OIDCProviderConfig struct {
	IssuerURL             string `hcl:"issuer_url"`
	ClientID              string `hcl:"client_id"`
	ClientSecret          string `hcl:"client_secret"`
	RedirectURL           string `hcl:"redirect_url"`
	PostLogoutRedirectURL string `hcl:"post_logout_redirect_url"`
	AuthURL               string `hcl:"auth_url"`
	TokenURL              string `hcl:"token_url"`
	UserInfoURL           string `hcl:"userinfo_url"`
	Issuer                string `hcl:"issuer"`
}

// OIDCTokensConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
type OIDCTokensConfig struct {
	SigningKey           string `hcl:"signing_key"`
	SigningMethod        string `hcl:"signing_method"`
	AccessTokenDuration  string `hcl:"access_token_duration"`
	RefreshTokenDuration string `hcl:"refresh_token_duration"`
	IDTokenDuration      string `hcl:"id_token_duration"`
}

// SecurityConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
type SecurityConfig struct {
	CORS      CORSConfig      `hcl:"cors,block"`
	RateLimit RateLimitConfig `hcl:"rate_limit,block"`
	Session   SessionConfig   `hcl:"session,block"`
}

// CORSConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS
type CORSConfig struct {
	AllowedOrigins   []string `hcl:"allowed_origins"`
	AllowedMethods   []string `hcl:"allowed_methods"`
	AllowedHeaders   []string `hcl:"allowed_headers"`
	AllowCredentials bool     `hcl:"allow_credentials"`
	MaxAge           int      `hcl:"max_age"`
}

// RateLimitConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è rate limiting
type RateLimitConfig struct {
	Enabled           bool `hcl:"enabled"`
	RequestsPerMinute int  `hcl:"requests_per_minute"`
	Burst             int  `hcl:"burst"`
}

// SessionConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ–π
type SessionConfig struct {
	Secret   string `hcl:"secret"`
	MaxAge   int    `hcl:"max_age"`
	Secure   bool   `hcl:"secure"`
	HTTPOnly bool   `hcl:"http_only"`
}

// RedisConfig –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Redis
type RedisConfig struct {
	Enabled    bool   `hcl:"enabled"`
	Host       string `hcl:"host"`
	Port       int    `hcl:"port"`
	Password   string `hcl:"password"`
	Database   int    `hcl:"database"`
	MaxRetries int    `hcl:"max_retries"`
	PoolSize   int    `hcl:"pool_size"`
}

// LoadConfig –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ HCL —Ñ–∞–π–ª—É
func LoadConfig(configPath string) (*Config, error) {
	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		return nil, fmt.Errorf("config file does not exist: %s", configPath)
	}

	var config Config
	err := hclsimple.DecodeFile(configPath, nil, &config)
	if err != nil {
		return nil, fmt.Errorf("failed to decode config file: %w", err)
	}

	// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
	if err := config.Validate(); err != nil {
		return nil, fmt.Errorf("config validation failed: %w", err)
	}

	return &config, nil
}

// Validate –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
func (c *Config) Validate() error {
	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞
	if c.Server.Port <= 0 || c.Server.Port > 65535 {
		return fmt.Errorf("invalid server port: %d", c.Server.Port)
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	if c.Database.Host == "" {
		return fmt.Errorf("database host is required")
	}
	if c.Database.Name == "" {
		return fmt.Errorf("database name is required")
	}
	if c.Database.User == "" {
		return fmt.Errorf("database user is required")
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ OIDC (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
	if c.OIDC.Provider.IssuerURL != "" {
		if c.OIDC.Provider.ClientID == "" {
			return fmt.Errorf("OIDC client ID is required when issuer URL is set")
		}
		if c.OIDC.Provider.ClientSecret == "" {
			return fmt.Errorf("OIDC client secret is required when issuer URL is set")
		}
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É —Å–µ—Å—ñ—ó
	if c.Security.Session.Secret == "" {
		return fmt.Errorf("session secret is required")
	}

	return nil
}

// GetAddress –ø–æ–≤–µ—Ä—Ç–∞—î –∞–¥—Ä–µ—Å—É –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
func (c *Config) GetAddress() string {
	return fmt.Sprintf("%s:%d", c.Server.Host, c.Server.Port)
}

// GetDatabaseDSN –ø–æ–≤–µ—Ä—Ç–∞—î DSN –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
func (c *Config) GetDatabaseDSN() string {
	return fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
		c.Database.Host,
		c.Database.Port,
		c.Database.User,
		c.Database.Password,
		c.Database.Name,
		c.Database.SSLMode,
	)
}

// IsDevelopment –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
func (c *Config) IsDevelopment() bool {
	return c.Server.Environment == "development"
}

// IsProduction –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º—ñ
func (c *Config) IsProduction() bool {
	return c.Server.Environment == "production"
}

// GenerateConfigFromTemplate –≥–µ–Ω–µ—Ä—É—î HCL –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ —à–∞–±–ª–æ–Ω—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∑–º—ñ–Ω–Ω—ñ
func GenerateConfigFromTemplate(templatePath, outputPath string, vars map[string]interface{}) error {
	return generateConfigWithVars(templatePath, outputPath, vars)
}

// StartServer –∑–∞–ø—É—Å–∫–∞—î HTTP —Å–µ—Ä–≤–µ—Ä –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
func StartServer(cfg *Config) error {
	// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
	setupLogging(cfg)

	// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	db, err := connectToDatabase(cfg)
	if err != nil {
		return fmt.Errorf("failed to connect to database: %w", err)
	}

	// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gin —Ä–µ–∂–∏–º—É
	if cfg.IsProduction() {
		gin.SetMode(gin.ReleaseMode)
	} else {
		gin.SetMode(gin.DebugMode)
	}

	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Gin —Ä–æ—É—Ç–µ—Ä–∞
	r := gin.New()

	// Swagger UI route
	// –Ü–º–ø–æ—Ä—Ç–∏: _ "go-practice/docs", ginSwagger "github.com/swaggo/gin-swagger", swaggerFiles "github.com/swaggo/files"
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// –î–æ–¥–∞–≤–∞–Ω–Ω—è middleware
	r.Use(gin.Logger())
	r.Use(gin.Recovery())
	r.Use(corsMiddleware(cfg))

	// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è routes (–ø–µ—Ä–µ–¥–∞—î–º–æ db –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ handlers)
	setupRoutes(r, cfg, db)

	// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç—ñ–≤
	readTimeout, err := time.ParseDuration(cfg.Server.ReadTimeout)
	if err != nil {
		logrus.Warnf("Invalid read timeout, using default: %v", err)
		readTimeout = 30 * time.Second
	}

	writeTimeout, err := time.ParseDuration(cfg.Server.WriteTimeout)
	if err != nil {
		logrus.Warnf("Invalid write timeout, using default: %v", err)
		writeTimeout = 30 * time.Second
	}

	idleTimeout, err := time.ParseDuration(cfg.Server.IdleTimeout)
	if err != nil {
		logrus.Warnf("Invalid idle timeout, using default: %v", err)
		idleTimeout = 120 * time.Second
	}

	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
	srv := &http.Server{
		Addr:         cfg.GetAddress(),
		Handler:      r,
		ReadTimeout:  readTimeout,
		WriteTimeout: writeTimeout,
		IdleTimeout:  idleTimeout,
	}

	// –ö–∞–Ω–∞–ª –¥–ª—è graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ goroutine
	go func() {
		logrus.Infof("üöÄ Starting OIDC API Server on %s", cfg.GetAddress())
		logrus.Infof("Environment: %s", cfg.Server.Environment)
		logrus.Infof("Log Level: %s", cfg.Server.LogLevel)

		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logrus.Fatalf("Failed to start server: %v", err)
		}
	}()

	// –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –¥–ª—è graceful shutdown
	<-quit
	logrus.Info("üõë Shutting down server...")

	// Graceful shutdown –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		logrus.Errorf("Server forced to shutdown: %v", err)
		return err
	}

	logrus.Info("‚úÖ Server exited gracefully")
	return nil
}

// setupLogging –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è
func setupLogging(cfg *Config) {
	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
	level, err := logrus.ParseLevel(cfg.Server.LogLevel)
	if err != nil {
		logrus.Warnf("Invalid log level '%s', using info", cfg.Server.LogLevel)
		level = logrus.InfoLevel
	}
	logrus.SetLevel(level)

	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É –ª–æ–≥—É–≤–∞–Ω–Ω—è
	if cfg.Server.LogFormat == "json" {
		logrus.SetFormatter(&logrus.JSONFormatter{})
	} else {
		logrus.SetFormatter(&logrus.TextFormatter{
			FullTimestamp: true,
		})
	}
}

// corsMiddleware –Ω–∞–ª–∞—à—Ç–æ–≤—É—î CORS middleware
func corsMiddleware(cfg *Config) gin.HandlerFunc {
	return gin.HandlerFunc(func(c *gin.Context) {
		// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è CORS –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
		origin := c.Request.Header.Get("Origin")
		if isAllowedOrigin(origin, cfg.Security.CORS.AllowedOrigins) {
			c.Header("Access-Control-Allow-Origin", origin)
		}

		c.Header("Access-Control-Allow-Methods", joinStrings(cfg.Security.CORS.AllowedMethods, ", "))
		c.Header("Access-Control-Allow-Headers", joinStrings(cfg.Security.CORS.AllowedHeaders, ", "))

		if cfg.Security.CORS.AllowCredentials {
			c.Header("Access-Control-Allow-Credentials", "true")
		}

		if cfg.Security.CORS.MaxAge > 0 {
			c.Header("Access-Control-Max-Age", fmt.Sprintf("%d", cfg.Security.CORS.MaxAge))
		}

		// Handle preflight requests
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	})
}

// setupRoutes –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –º–∞—Ä—à—Ä—É—Ç–∏
func setupRoutes(r *gin.Engine, cfg *Config, db *gorm.DB) {
	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
	userService := services.NewUserService(db)

	// –°—Ç–≤–æ—Ä—é—î–º–æ JWT —Å–µ—Ä–≤—ñ—Å –∑ —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
	jwtService := services.NewJWTService(
		cfg.OIDC.Tokens.SigningKey+"_access",
		cfg.OIDC.Tokens.SigningKey+"_id",
		cfg.OIDC.Tokens.SigningKey+"_refresh",
	)

	// –°—Ç–≤–æ—Ä—é—î–º–æ State —Å–µ—Ä–≤—ñ—Å –¥–ª—è CSRF –∑–∞—Ö–∏—Å—Ç—É (TTL 10 —Ö–≤–∏–ª–∏–Ω)
	stateService := services.NewStateService(10 * time.Minute)

	// –°—Ç–≤–æ—Ä—é—î–º–æ OIDC Provider —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
	oidcProviderService := services.NewOIDCProviderService(
		cfg.OIDC.Provider.ClientID,
		cfg.OIDC.Provider.ClientSecret,
		cfg.OIDC.Provider.TokenURL,
		cfg.OIDC.Provider.UserInfoURL,
		cfg.OIDC.Provider.Issuer,
	)

	// –°—Ç–≤–æ—Ä—é—î–º–æ Session Manager –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π (TTL 1 –≥–æ–¥–∏–Ω–∞)
	sessionManager := services.NewSessionManager(1 * time.Hour)

	// –°—Ç–≤–æ—Ä—é—î–º–æ Auth —Å–µ—Ä–≤—ñ—Å —è–∫–∏–π –æ–±'—î–¥–Ω—É—î –≤—Å—ñ —ñ–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏
	authService := services.NewAuthService(userService, jwtService, stateService, oidcProviderService, sessionManager)

	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ handlers –∑ —É—Å—ñ–º–∞ —Å–µ—Ä–≤—ñ—Å–∞–º–∏
	authHandler := handlers.NewAuthHandler(authService, cfg.OIDC.Provider.PostLogoutRedirectURL) // –ü–µ—Ä–µ–¥–∞—î–º–æ postLogoutRedirectURL –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
	apiHandler := handlers.NewAPIHandler(userService)                                            // Health endpoint –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
	r.GET("/health", func(c *gin.Context) {
		// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
		sqlDB, err := db.DB()
		dbStatus := "healthy"
		if err != nil || sqlDB.Ping() != nil {
			dbStatus = "unhealthy"
		}

		c.JSON(200, gin.H{
			"status":   "healthy",
			"service":  "oidc-api-server",
			"version":  "dev",
			"database": dbStatus,
		})
	})

	// –î–æ–¥–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç health endpoint –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç—É
	r.GET("/api/health", func(c *gin.Context) {
		// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
		sqlDB, err := db.DB()
		dbStatus := "healthy"
		if err != nil || sqlDB.Ping() != nil {
			dbStatus = "unhealthy"
		}

		c.JSON(200, gin.H{
			"status":   "healthy",
			"service":  "oidc-api-server",
			"version":  "dev",
			"database": dbStatus,
		})
	})

	// API group
	api := r.Group("/api/v1")
	{
		// Public endpoints
		api.GET("/public", apiHandler.PublicData)

		// Protected endpoints –∑ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
		protected := api.Group("/")
		protected.Use(middleware.AuthMiddleware(jwtService, userService))
		{
			protected.GET("/protected", apiHandler.ProtectedData)
			protected.GET("/profile", apiHandler.UserProfile)
			protected.PUT("/profile", apiHandler.UpdateProfile)
			protected.GET("/user-data", apiHandler.UserData)
			protected.GET("/users", apiHandler.Users)
			protected.GET("/users/:id", apiHandler.GetUserByID)
			protected.POST("/users/search", apiHandler.SearchUsers)
		}

		// Database test endpoint
		api.GET("/db-test", func(c *gin.Context) {
			// –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
			var result struct {
				Version string
				Now     time.Time
			}

			if err := db.Raw("SELECT version() as version, now() as now").Scan(&result).Error; err != nil {
				c.JSON(500, gin.H{
					"error":   "Database query failed",
					"details": err.Error(),
				})
				return
			}

			c.JSON(200, gin.H{
				"message":          "Database connection successful",
				"database_version": result.Version,
				"server_time":      result.Now,
			})
		})
	}

	// OIDC endpoints
	oidc := r.Group("/auth")
	{
		oidc.POST("/default/login", authHandler.DefaultLogin)
		oidc.POST("/login", authHandler.Login)       // Resource Owner Password Grant
		oidc.GET("/callback", authHandler.Callback)  // Authorization Code Flow callback
		oidc.POST("/logout", authHandler.Logout)     // End Session
		oidc.POST("/refresh", authHandler.Refresh)   // Token Refresh
		oidc.GET("/userinfo", authHandler.UserInfo)  // UserInfo endpoint
		oidc.POST("/register", authHandler.Register) // User Registration
	}
}

// Helper functions
func isAllowedOrigin(origin string, allowedOrigins []string) bool {
	for _, allowed := range allowedOrigins {
		if allowed == "*" || allowed == origin {
			return true
		}
	}
	return false
}

func joinStrings(strs []string, sep string) string {
	if len(strs) == 0 {
		return ""
	}
	result := strs[0]
	for i := 1; i < len(strs); i++ {
		result += sep + strs[i]
	}
	return result
}

// connectToDatabase –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ PostgreSQL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ GORM
func connectToDatabase(cfg *Config) (*gorm.DB, error) {
	dsn := cfg.GetDatabaseDSN()
	logrus.Infof("üîå Connecting to PostgreSQL database: %s@%s:%d/%s",
		cfg.Database.User, cfg.Database.Host, cfg.Database.Port, cfg.Database.Name)

	// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GORM –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
	gormConfig := &gorm.Config{
		DisableForeignKeyConstraintWhenMigrating: true,
	}

	// –í debug —Ä–µ–∂–∏–º—ñ –≤–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—ñ–≤
	if cfg.IsDevelopment() {
		gormConfig.Logger = logger.Default.LogMode(logger.Info)
	}

	// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	db, err := gorm.Open(postgres.Open(dsn), gormConfig)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	// –û—Ç—Ä–∏–º–∞–Ω–Ω—è sqlDB –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è connection pool
	sqlDB, err := db.DB()
	if err != nil {
		return nil, fmt.Errorf("failed to get underlying sql.DB: %w", err)
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ connection max lifetime
	connectionMaxLifetime, err := time.ParseDuration(cfg.Database.ConnectionMaxLifetime)
	if err != nil {
		logrus.Warnf("Invalid connection max lifetime, using default 5m: %v", err)
		connectionMaxLifetime = 5 * time.Minute
	}

	// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è connection pool
	sqlDB.SetMaxOpenConns(cfg.Database.MaxOpenConnections)
	sqlDB.SetMaxIdleConns(cfg.Database.MaxIdleConnections)
	sqlDB.SetConnMaxLifetime(connectionMaxLifetime)

	// –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
	if err := sqlDB.Ping(); err != nil {
		return nil, fmt.Errorf("failed to ping database: %w", err)
	}

	logrus.Infof("üìä Database connection pool configured: MaxOpen=%d, MaxIdle=%d, MaxLifetime=%v",
		cfg.Database.MaxOpenConnections, cfg.Database.MaxIdleConnections, connectionMaxLifetime)

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π, —è–∫—ñ –º–∞—é—Ç—å GORM-—Å—Ç—Ä—É–∫—Ç—É—Ä–∏
	logrus.Info("üõ†Ô∏è  Running AutoMigrate for User and Friendship...")
	if err := db.AutoMigrate(
		&services.User{},
		&migrations.Friendship{},
	); err != nil {
		return nil, fmt.Errorf("failed to migrate database: %w", err)
	}

	logrus.Info("‚úÖ Database connection established and migrated")
	return db, nil
}

// RunMigrations –≤–∏–∫–æ–Ω—É—î —Ç—ñ–ª—å–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó –±–µ–∑ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
func RunMigrations(cfg *Config) error {
	dsn := cfg.GetDatabaseDSN()
	logrus.Infof("üîå Connecting to PostgreSQL database for migrations: %s@%s:%d/%s",
		cfg.Database.User, cfg.Database.Host, cfg.Database.Port, cfg.Database.Name)

	// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GORM –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
	gormConfig := &gorm.Config{
		DisableForeignKeyConstraintWhenMigrating: true,
	}

	// –í debug —Ä–µ–∂–∏–º—ñ –≤–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—ñ–≤
	if cfg.IsDevelopment() {
		gormConfig.Logger = logger.Default.LogMode(logger.Info)
	}

	// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
	db, err := gorm.Open(postgres.Open(dsn), gormConfig)
	if err != nil {
		return fmt.Errorf("failed to connect to database: %w", err)
	}

	// –û—Ç—Ä–∏–º–∞–Ω–Ω—è sqlDB –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
	sqlDB, err := db.DB()
	if err != nil {
		return fmt.Errorf("failed to get underlying sql.DB: %w", err)
	}

	// –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
	if err := sqlDB.Ping(); err != nil {
		return fmt.Errorf("failed to ping database: %w", err)
	}

	logrus.Info("üõ†Ô∏è  Running migrations for new tables only...")

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è friendships
	var exists bool
	err = db.Raw("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'friendships')").Scan(&exists).Error
	if err != nil {
		return fmt.Errorf("failed to check if friendships table exists: %w", err)
	}

	if !exists {
		logrus.Info("Creating friendships table...")
		// –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–∞–±–ª–∏—Ü—é friendships, –Ω–µ —á—ñ–ø–∞—î–º–æ users
		if err := db.AutoMigrate(&migrations.Friendship{}); err != nil {
			return fmt.Errorf("failed to create friendships table: %w", err)
		}
		logrus.Info("‚úÖ Friendships table created successfully")
	} else {
		logrus.Info("Friendships table already exists, skipping...")
	}

	logrus.Info("‚úÖ Database migrations completed successfully")

	// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
	sqlDB.Close()

	return nil
}
