apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-api
  labels:
    app: go-api
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: go-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: 2025-08-03T00:29:44Z
      labels:
        app: go-api
    spec:
      initContainers:
        - name: db-migration
          image: nabuhotnii/go-api:b1cc5695867d5686a798b198e9fe05716d9e5cfb
          command: ["/bin/sh", "-c"]
          args:
            - "echo \"Running database migrations...\"\ncat > /tmp/migration.hcl << 'EOF'\nserver {\n  host = \"0.0.0.0\"\n  port = 8080\n  environment = \"production\"\n  log_level = \"info\"\n  log_format = \"text\"\n  read_timeout = \"30s\"\n  write_timeout = \"30s\"\n  idle_timeout = \"120s\"\n}\n\ndatabase {\n  driver = \"postgres\"\n  host = \"postgres-service\"\n  port = 5432\n  name = \"go_practice\"\n  user = \"oidc_api_user\"\n  password = \"oidc_secure_password_2025\"\n  ssl_mode = \"disable\"\n  max_open_connections = 10\n  max_idle_connections = 5\n  connection_max_lifetime = \"5m\"\n}\n\noidc {\n  provider {\n    issuer_url = \"https://accounts.google.com\"\n    client_id = \"dummy\"\n    client_secret = \"dummy\"\n    redirect_url = \"https://api.example.com/auth/callback\"\n    post_logout_redirect_url = \"https://app.example.com\"\n    auth_url = \"https://accounts.google.com/o/oauth2/v2/auth\"\n    token_url = \"https://oauth2.googleapis.com/token\"\n    userinfo_url = \"https://openidconnect.googleapis.com/v1/userinfo\"\n    issuer = \"https://accounts.google.com\"\n  }\n  \n  tokens {\n    signing_key = \"dev-jwt-secret\"\n    signing_method = \"HS256\"\n    access_token_duration = \"1h\"\n    refresh_token_duration = \"24h\"\n    id_token_duration = \"1h\"\n  }\n  \n  scopes = [\"openid\", \"profile\", \"email\"]\n}\n\nsecurity {\n  cors {\n    allowed_origins = [\"*\"]\n    allowed_methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"]\n    allowed_headers = [\"*\"]\n    allow_credentials = true\n    max_age = 3600\n  }\n  \n  rate_limit {\n    enabled = true\n    requests_per_minute = 100\n    burst = 50\n  }\n  \n  session {\n    secret = \"dev-session-secret\"\n    max_age = 3600\n    secure = false\n    http_only = true\n  }\n}\n\nredis {\n  enabled = false\n  host = \"localhost\"\n  port = 6379\n  password = \"\"\n  database = 0\n  max_retries = 3\n  pool_size = 10\n}\nEOF\n\n/root/api-server migrate -c /tmp/migration.hcl\n"
          envFrom:
            - configMapRef:
                name: go-api-config
            - secretRef:
                name: go-api-secrets
          resources:
            requests:
              memory: "32Mi"
              cpu: "25m"
            limits:
              memory: "64Mi"
              cpu: "50m"
      containers:
        - name: go-api
          image: nabuhotnii/go-api:171181ba76c3e8427a62c2569d47821673363cab
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          args:
            - "echo \"Starting Go API server...\"\ncat > /tmp/server.hcl << 'EOF'\nserver {\n  host = \"0.0.0.0\"\n  port = 8080\n  environment = \"production\"\n  log_level = \"info\"\n  log_format = \"text\"\n  read_timeout = \"30s\"\n  write_timeout = \"30s\"\n  idle_timeout = \"120s\"\n}\n\ndatabase {\n  driver = \"postgres\"\n  host = \"postgres-service\"\n  port = 5432\n  name = \"go_practice\"\n  user = \"oidc_api_user\"\n  password = \"oidc_secure_password_2025\"\n  ssl_mode = \"disable\"\n  max_open_connections = 10\n  max_idle_connections = 5\n  connection_max_lifetime = \"5m\"\n}\n\noidc {\n  provider {\n    issuer_url = \"https://accounts.google.com\"\n    client_id = \"dummy\"\n    client_secret = \"dummy\"\n    redirect_url = \"https://api.example.com/auth/callback\"\n    post_logout_redirect_url = \"https://app.example.com\"\n    auth_url = \"https://accounts.google.com/o/oauth2/v2/auth\"\n    token_url = \"https://oauth2.googleapis.com/token\"\n    userinfo_url = \"https://openidconnect.googleapis.com/v1/userinfo\"\n    issuer = \"https://accounts.google.com\"\n  }\n  \n  tokens {\n    signing_key = \"dev-jwt-secret\"\n    signing_method = \"HS256\"\n    access_token_duration = \"1h\"\n    refresh_token_duration = \"24h\"\n    id_token_duration = \"1h\"\n  }\n  \n  scopes = [\"openid\", \"profile\", \"email\"]\n}\n\nsecurity {\n  cors {\n    allowed_origins = [\"*\"]\n    allowed_methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"]\n    allowed_headers = [\"*\"]\n    allow_credentials = true\n    max_age = 3600\n  }\n  \n  rate_limit {\n    enabled = true\n    requests_per_minute = 100\n    burst = 50\n  }\n  \n  session {\n    secret = \"dev-session-secret\"\n    max_age = 3600\n    secure = false\n    http_only = true\n  }\n}\n\nredis {\n  enabled = false\n  host = \"localhost\"\n  port = 6379\n  password = \"\"\n  database = 0\n  max_retries = 3\n  pool_size = 10\n}\nEOF\n\necho \"Starting server with config...\"\n/root/api-server server -c /tmp/server.hcl\n"
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: go-api-config
            - secretRef:
                name: go-api-secrets
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
